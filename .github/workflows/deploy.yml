name: Deploy InformationsWerkstatt

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    # Secrets in env spiegeln, damit wir sie in if: verwenden können
    env:
      SWA_TOKEN: ${{ secrets.AZURE_SWA_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      # Login via Credentials-JSON (stabil)
      - name: Azure Login
        uses: azure/login@v2
        with:
          auth-type: service-principal
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # --- Infrastruktur (nur wenn vorhanden)
      - name: Deploy Infrastructure (conditional)
        if: hashFiles('infra/main.bicep') != ''
        uses: azure/arm-deploy@v1
        with:
          scope: resourcegroup
          resourceGroupName: rg_informationswerkstatt
          template: infra/main.bicep
          parameters: env=dev sqlAdminPassword=${{ secrets.SQL_ADMIN_PASSWORD }}

      # --- Node 20
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # --- Frontend build (nur wenn vorhanden)
      - name: Build Frontend
        run: |
          if [ -f frontend/package.json ]; then
            cd frontend
            npm ci
            npm run build
          else
            echo "No frontend yet – skipping build."
          fi

      # --- SWA Deploy (nur wenn Token gespiegelt & Frontend vorhanden)
      - name: Deploy Frontend (Static Web Apps)
        if: ${{ env.SWA_TOKEN != '' && hashFiles('frontend/package.json') != '' }}
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ env.SWA_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "frontend"
          output_location: "dist"

      # --- Functions: robust, nur wenn vorhanden
      - name: Build & Deploy Functions (Python) – robust
        if: hashFiles('functions/requirements.txt') != ''
        working-directory: functions
        env:
          RG_NAME: rg_informationswerkstatt
          FUNC_NAME: func-hf-info-dev
        run: |
          echo "Checking if Function App '$FUNC_NAME' exists in RG '$RG_NAME'..."
          if ! az functionapp show --name "$FUNC_NAME" --resource-group "$RG_NAME" >/dev/null 2>&1; then
            echo "::warning::Function App '$FUNC_NAME' not found. Skipping zip-deploy."
            exit 0
          fi

          python -m pip install -U pip
          python -m pip install -r requirements.txt -t ./package

          rsync -a --exclude 'package' ./ ./package/
          (cd package && zip -rq ../functions.zip .)

          echo "Starting zip-deploy..."
          if ! az functionapp deployment source config-zip \
              --resource-group "$RG_NAME" \
              --name "$FUNC_NAME" \
              --src functions.zip; then
            echo "::warning::Zip-deploy failed – not failing the workflow."
          fi

      # Diagnose
      - name: Show Azure context
        run: |
          az account show --query '{name:name, id:id, tenantId:tenantId}' -o table
          az group show --name rg_informationswerkstatt --query '{name:name, location:location, id:id}' || true
